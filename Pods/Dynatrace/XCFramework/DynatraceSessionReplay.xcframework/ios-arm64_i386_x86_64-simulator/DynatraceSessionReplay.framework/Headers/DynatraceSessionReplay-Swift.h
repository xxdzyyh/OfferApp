#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef DYNATRACESESSIONREPLAY_SWIFT_H
#define DYNATRACESESSIONREPLAY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DynatraceSessionReplay",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC22DynatraceSessionReplay12AgentManager")
@interface AgentManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDictionary;
@class TrackingConfiguration;
@class UIView;
@class MaskingConfiguration;

@interface AgentManager (SWIFT_EXTENSION(DynatraceSessionReplay))
+ (void)start:(NSDictionary * _Nonnull)config;
+ (void)startWithDefaultConfig:(NSDictionary<NSString *, id> * _Nullable)defaultConfig beaconUrl:(NSString * _Nonnull)beaconUrl applicationId:(NSString * _Nonnull)applicationId;
+ (void)uploadData;
+ (void)changeUploadIntervalTime:(NSTimeInterval)uploadIntervalTime;
+ (void)configure:(TrackingConfiguration * _Nonnull)newConfiguration;
+ (void)trackCustomEventWithName:(NSString * _Nonnull)name withView:(UIView * _Nullable)view takeScreenshot:(BOOL)takeScreenshot;
+ (void)takeScreenshot;
+ (BOOL)setMaskingConfiguration:(MaskingConfiguration * _Nonnull)maskingConfiguration error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)setLockedMaskingConfiguration:(MaskingConfiguration * _Nonnull)maskingConfiguration error:(NSError * _Nullable * _Nullable)error;
+ (void)lockMaskingConfiguration;
+ (MaskingConfiguration * _Nonnull)getMaskingConfiguration SWIFT_WARN_UNUSED_RESULT;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DBBeaconDataJob")
@interface DBBeaconDataJob : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSDate;

@interface DBBeaconDataJob (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, strong) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nonnull visitId;
@property (nonatomic, strong) NSDate * _Nonnull endTime;
@property (nonatomic) int16_t protocolVersion;
@property (nonatomic, strong) NSDate * _Nonnull startTime;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@end


SWIFT_CLASS_NAMED("DBEvent")
@interface DBEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class DBSession;
@class NSNumber;

@interface DBEvent (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, strong) NSDate * _Nonnull startTime;
@property (nonatomic, strong) DBSession * _Nonnull dbSession;
@property (nonatomic, copy) NSString * _Nullable screenshotId;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, strong) NSNumber * _Nullable screenshotSize;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@property (nonatomic, strong) NSNumber * _Nullable positionX;
@property (nonatomic, strong) NSNumber * _Nullable positionY;
@property (nonatomic, strong) NSNumber * _Nullable viewWidth;
@property (nonatomic, strong) NSNumber * _Nullable viewHeight;
@property (nonatomic) BOOL masked;
@end


SWIFT_CLASS_NAMED("DBScreenshotJob")
@interface DBScreenshotJob : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DBScreenshotJob (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, copy) NSString * _Nonnull screenshotId;
@property (nonatomic, copy) NSString * _Nonnull visitId;
@property (nonatomic, copy) NSString * _Nonnull visitorId;
@property (nonatomic, strong) NSNumber * _Nonnull visitStore;
@property (nonatomic, strong) NSDate * _Nonnull timestamp;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@end


SWIFT_CLASS_NAMED("DBSession")
@interface DBSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;

@interface DBSession (SWIFT_EXTENSION(DynatraceSessionReplay))
- (void)addDbEventsObject:(DBEvent * _Nonnull)value;
- (void)removeDbEventsObject:(DBEvent * _Nonnull)value;
- (void)addDbEvents:(NSSet * _Nonnull)values;
- (void)removeDbEvents:(NSSet * _Nonnull)values;
@end


@interface DBSession (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@property (nonatomic, copy) NSString * _Nonnull visitorId;
@property (nonatomic, copy) NSString * _Nonnull sessionId;
@property (nonatomic, strong) NSNumber * _Nonnull visitStore;
@property (nonatomic, strong) NSSet * _Nonnull dbEvents;
@end


enum MaskingLevelType : int16_t;

SWIFT_CLASS("_TtC22DynatraceSessionReplay20MaskingConfiguration")
@interface MaskingConfiguration : NSObject
- (nonnull instancetype)initWithMaskingLevelType:(enum MaskingLevelType)maskingLevelType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum MaskingRule : int16_t;

@interface MaskingConfiguration (SWIFT_EXTENSION(DynatraceSessionReplay))
- (BOOL)addWithRule:(enum MaskingRule)rule error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addAllRulesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeWithRule:(enum MaskingRule)rule error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeAllRulesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)addMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addNonMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeNonMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
@end

typedef SWIFT_ENUM(int16_t, MaskingLevelType, open) {
  MaskingLevelTypeSafest = 0,
  MaskingLevelTypeSafe = 1,
  MaskingLevelTypeCustom = 2,
};

typedef SWIFT_ENUM(int16_t, MaskingRule, open) {
  MaskingRuleMaskAllInputFields = 0,
  MaskingRuleMaskAllLabelTexts = 1,
  MaskingRuleMaskAllImages = 2,
  MaskingRuleMaskAllWebViews = 3,
  MaskingRuleMaskAllSwitches = 4,
};


typedef SWIFT_ENUM(int16_t, POI, open) {
  POICrash = 0,
};


SWIFT_CLASS("_TtC22DynatraceSessionReplay21TrackingConfiguration")
@interface TrackingConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

















































#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef DYNATRACESESSIONREPLAY_SWIFT_H
#define DYNATRACESESSIONREPLAY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DynatraceSessionReplay",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC22DynatraceSessionReplay12AgentManager")
@interface AgentManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDictionary;
@class TrackingConfiguration;
@class UIView;
@class MaskingConfiguration;

@interface AgentManager (SWIFT_EXTENSION(DynatraceSessionReplay))
+ (void)start:(NSDictionary * _Nonnull)config;
+ (void)startWithDefaultConfig:(NSDictionary<NSString *, id> * _Nullable)defaultConfig beaconUrl:(NSString * _Nonnull)beaconUrl applicationId:(NSString * _Nonnull)applicationId;
+ (void)uploadData;
+ (void)changeUploadIntervalTime:(NSTimeInterval)uploadIntervalTime;
+ (void)configure:(TrackingConfiguration * _Nonnull)newConfiguration;
+ (void)trackCustomEventWithName:(NSString * _Nonnull)name withView:(UIView * _Nullable)view takeScreenshot:(BOOL)takeScreenshot;
+ (void)takeScreenshot;
+ (BOOL)setMaskingConfiguration:(MaskingConfiguration * _Nonnull)maskingConfiguration error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)setLockedMaskingConfiguration:(MaskingConfiguration * _Nonnull)maskingConfiguration error:(NSError * _Nullable * _Nullable)error;
+ (void)lockMaskingConfiguration;
+ (MaskingConfiguration * _Nonnull)getMaskingConfiguration SWIFT_WARN_UNUSED_RESULT;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DBBeaconDataJob")
@interface DBBeaconDataJob : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSDate;

@interface DBBeaconDataJob (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, strong) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nonnull visitId;
@property (nonatomic, strong) NSDate * _Nonnull endTime;
@property (nonatomic) int16_t protocolVersion;
@property (nonatomic, strong) NSDate * _Nonnull startTime;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@end


SWIFT_CLASS_NAMED("DBEvent")
@interface DBEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class DBSession;
@class NSNumber;

@interface DBEvent (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, strong) NSDate * _Nonnull startTime;
@property (nonatomic, strong) DBSession * _Nonnull dbSession;
@property (nonatomic, copy) NSString * _Nullable screenshotId;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, strong) NSNumber * _Nullable screenshotSize;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@property (nonatomic, strong) NSNumber * _Nullable positionX;
@property (nonatomic, strong) NSNumber * _Nullable positionY;
@property (nonatomic, strong) NSNumber * _Nullable viewWidth;
@property (nonatomic, strong) NSNumber * _Nullable viewHeight;
@property (nonatomic) BOOL masked;
@end


SWIFT_CLASS_NAMED("DBScreenshotJob")
@interface DBScreenshotJob : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DBScreenshotJob (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, copy) NSString * _Nonnull screenshotId;
@property (nonatomic, copy) NSString * _Nonnull visitId;
@property (nonatomic, copy) NSString * _Nonnull visitorId;
@property (nonatomic, strong) NSNumber * _Nonnull visitStore;
@property (nonatomic, strong) NSDate * _Nonnull timestamp;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@end


SWIFT_CLASS_NAMED("DBSession")
@interface DBSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;

@interface DBSession (SWIFT_EXTENSION(DynatraceSessionReplay))
- (void)addDbEventsObject:(DBEvent * _Nonnull)value;
- (void)removeDbEventsObject:(DBEvent * _Nonnull)value;
- (void)addDbEvents:(NSSet * _Nonnull)values;
- (void)removeDbEvents:(NSSet * _Nonnull)values;
@end


@interface DBSession (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@property (nonatomic, copy) NSString * _Nonnull visitorId;
@property (nonatomic, copy) NSString * _Nonnull sessionId;
@property (nonatomic, strong) NSNumber * _Nonnull visitStore;
@property (nonatomic, strong) NSSet * _Nonnull dbEvents;
@end


enum MaskingLevelType : int16_t;

SWIFT_CLASS("_TtC22DynatraceSessionReplay20MaskingConfiguration")
@interface MaskingConfiguration : NSObject
- (nonnull instancetype)initWithMaskingLevelType:(enum MaskingLevelType)maskingLevelType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum MaskingRule : int16_t;

@interface MaskingConfiguration (SWIFT_EXTENSION(DynatraceSessionReplay))
- (BOOL)addWithRule:(enum MaskingRule)rule error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addAllRulesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeWithRule:(enum MaskingRule)rule error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeAllRulesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)addMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addNonMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeNonMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
@end

typedef SWIFT_ENUM(int16_t, MaskingLevelType, open) {
  MaskingLevelTypeSafest = 0,
  MaskingLevelTypeSafe = 1,
  MaskingLevelTypeCustom = 2,
};

typedef SWIFT_ENUM(int16_t, MaskingRule, open) {
  MaskingRuleMaskAllInputFields = 0,
  MaskingRuleMaskAllLabelTexts = 1,
  MaskingRuleMaskAllImages = 2,
  MaskingRuleMaskAllWebViews = 3,
  MaskingRuleMaskAllSwitches = 4,
};


typedef SWIFT_ENUM(int16_t, POI, open) {
  POICrash = 0,
};


SWIFT_CLASS("_TtC22DynatraceSessionReplay21TrackingConfiguration")
@interface TrackingConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

















































#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef DYNATRACESESSIONREPLAY_SWIFT_H
#define DYNATRACESESSIONREPLAY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DynatraceSessionReplay",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC22DynatraceSessionReplay12AgentManager")
@interface AgentManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDictionary;
@class TrackingConfiguration;
@class UIView;
@class MaskingConfiguration;

@interface AgentManager (SWIFT_EXTENSION(DynatraceSessionReplay))
+ (void)start:(NSDictionary * _Nonnull)config;
+ (void)startWithDefaultConfig:(NSDictionary<NSString *, id> * _Nullable)defaultConfig beaconUrl:(NSString * _Nonnull)beaconUrl applicationId:(NSString * _Nonnull)applicationId;
+ (void)uploadData;
+ (void)changeUploadIntervalTime:(NSTimeInterval)uploadIntervalTime;
+ (void)configure:(TrackingConfiguration * _Nonnull)newConfiguration;
+ (void)trackCustomEventWithName:(NSString * _Nonnull)name withView:(UIView * _Nullable)view takeScreenshot:(BOOL)takeScreenshot;
+ (void)takeScreenshot;
+ (BOOL)setMaskingConfiguration:(MaskingConfiguration * _Nonnull)maskingConfiguration error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)setLockedMaskingConfiguration:(MaskingConfiguration * _Nonnull)maskingConfiguration error:(NSError * _Nullable * _Nullable)error;
+ (void)lockMaskingConfiguration;
+ (MaskingConfiguration * _Nonnull)getMaskingConfiguration SWIFT_WARN_UNUSED_RESULT;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DBBeaconDataJob")
@interface DBBeaconDataJob : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSDate;

@interface DBBeaconDataJob (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, strong) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nonnull visitId;
@property (nonatomic, strong) NSDate * _Nonnull endTime;
@property (nonatomic) int16_t protocolVersion;
@property (nonatomic, strong) NSDate * _Nonnull startTime;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@end


SWIFT_CLASS_NAMED("DBEvent")
@interface DBEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class DBSession;
@class NSNumber;

@interface DBEvent (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, strong) NSDate * _Nonnull startTime;
@property (nonatomic, strong) DBSession * _Nonnull dbSession;
@property (nonatomic, copy) NSString * _Nullable screenshotId;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, strong) NSNumber * _Nullable screenshotSize;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@property (nonatomic, strong) NSNumber * _Nullable positionX;
@property (nonatomic, strong) NSNumber * _Nullable positionY;
@property (nonatomic, strong) NSNumber * _Nullable viewWidth;
@property (nonatomic, strong) NSNumber * _Nullable viewHeight;
@property (nonatomic) BOOL masked;
@end


SWIFT_CLASS_NAMED("DBScreenshotJob")
@interface DBScreenshotJob : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DBScreenshotJob (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, copy) NSString * _Nonnull screenshotId;
@property (nonatomic, copy) NSString * _Nonnull visitId;
@property (nonatomic, copy) NSString * _Nonnull visitorId;
@property (nonatomic, strong) NSNumber * _Nonnull visitStore;
@property (nonatomic, strong) NSDate * _Nonnull timestamp;
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@end


SWIFT_CLASS_NAMED("DBSession")
@interface DBSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;

@interface DBSession (SWIFT_EXTENSION(DynatraceSessionReplay))
- (void)addDbEventsObject:(DBEvent * _Nonnull)value;
- (void)removeDbEventsObject:(DBEvent * _Nonnull)value;
- (void)addDbEvents:(NSSet * _Nonnull)values;
- (void)removeDbEvents:(NSSet * _Nonnull)values;
@end


@interface DBSession (SWIFT_EXTENSION(DynatraceSessionReplay))
@property (nonatomic, copy) NSString * _Nonnull agentIdentifier;
@property (nonatomic, copy) NSString * _Nonnull visitorId;
@property (nonatomic, copy) NSString * _Nonnull sessionId;
@property (nonatomic, strong) NSNumber * _Nonnull visitStore;
@property (nonatomic, strong) NSSet * _Nonnull dbEvents;
@end


enum MaskingLevelType : int16_t;

SWIFT_CLASS("_TtC22DynatraceSessionReplay20MaskingConfiguration")
@interface MaskingConfiguration : NSObject
- (nonnull instancetype)initWithMaskingLevelType:(enum MaskingLevelType)maskingLevelType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum MaskingRule : int16_t;

@interface MaskingConfiguration (SWIFT_EXTENSION(DynatraceSessionReplay))
- (BOOL)addWithRule:(enum MaskingRule)rule error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addAllRulesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeWithRule:(enum MaskingRule)rule error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeAllRulesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)addMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addNonMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeNonMaskedViewWithViewIds:(NSArray<NSString *> * _Nonnull)viewIds error:(NSError * _Nullable * _Nullable)error;
@end

typedef SWIFT_ENUM(int16_t, MaskingLevelType, open) {
  MaskingLevelTypeSafest = 0,
  MaskingLevelTypeSafe = 1,
  MaskingLevelTypeCustom = 2,
};

typedef SWIFT_ENUM(int16_t, MaskingRule, open) {
  MaskingRuleMaskAllInputFields = 0,
  MaskingRuleMaskAllLabelTexts = 1,
  MaskingRuleMaskAllImages = 2,
  MaskingRuleMaskAllWebViews = 3,
  MaskingRuleMaskAllSwitches = 4,
};


typedef SWIFT_ENUM(int16_t, POI, open) {
  POICrash = 0,
};


SWIFT_CLASS("_TtC22DynatraceSessionReplay21TrackingConfiguration")
@interface TrackingConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

















































#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
